<?xml version="1.0" encoding="utf-8" standalone="no"?>
<xsl:stylesheet xmlns:xitec="xitec.dtd" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

  <xsl:output method="html"/>

  
  <xsl:template match="/"><xsl:param name="address"/><xsl:param name="realaddress"/><xsl:param name="node"/>

    Widget Template compiler:  Temis.Xitec
    
    Compiler uses very simplest way.

    If you have using in XSLT expressions xpath for retriveing WIDGET information
    begins from '/widget/'  (for example:  /widget/@attribute)
    then comiler switches to WIDGET mode and performs copying your
    template code into output template

    If you have using xpath for getting OBJECT information then compiler
    switches to GEN (generation) mode and performs generating instruction
    for creating your code in target template

    If you have using instructions without using address /widget/ or /object/
    then compiler performs transformations according to current mode.
    
    Compiler performs tesing only @test, @select and @name tags of XSLT instructions

    Run:
    xsltproc compiler.xsl readme.xsl

    <xsl:call-template name="demo"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:call-template>

    <xsl:apply-templates select="." mode="samples"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates>
    <xsl:call-template name="gen:newline"/><xsl:element name="xsl:apply-templates"><xsl:attribute name="select"><xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>.</xsl:attribute><xsl:attribute name="mode">/samples</xsl:attribute></xsl:element>

  </xsl:template>


  <xsl:template name="demo"><xsl:param name="address"/><xsl:param name="realaddress"/><xsl:param name="node"/>
    <!-- demo -->

    <!-- will be copied -->
    <div id="div1">
      <!-- will be copied -->
      <xsl:if test="value">
        <!-- will be copied -->
        <xsl:attribute name="style">border: thin solid black;</xsl:attribute>

        <!-- will be copied -->
        <div id="div2">

          <!-- will be generated -->
          <xsl:call-template name="gen:newline"/><xsl:element name="xsl:if"><xsl:attribute name="test"><xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>value</xsl:attribute><!-- will be generated --><div><xsl:attribute name="id">{<xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>@id}</xsl:attribute></div><!-- will be generated --><div><xsl:attribute name="id">/{@id}</xsl:attribute></div><!-- will be generated --><xsl:element name="xsl:attribute"><xsl:attribute name="name">value</xsl:attribute><xsl:text>caption</xsl:text></xsl:element><!-- will be copied --><div id="{@id}"/><!-- will be copied --><xsl:if test="value">

              <!-- will be copied -->
              <xsl:attribute name="style">width:200px;</xsl:attribute>
            </xsl:if></xsl:element>
        </div>
      </xsl:if>
    </div>
    <!-- /demo -->
  </xsl:template>

  <xsl:template match="*" mode="samples"><xsl:param name="address"/><xsl:param name="realaddress"/><xsl:param name="node"/>
    
    <!-- How it's works.  Tests here. -->
    
    <!-- widget commands -->
    <!-- should be generated as is but without /widget/ -->
    
    <xsl:output method="html"/><xsl:template name="inc-template"><xsl:param name="address"/><xsl:param name="realaddress"/><xsl:param name="node"/>
    <div/>
  </xsl:template>

    <xsl:variable name="var2" select="value"/>
    <xsl:variable name="var1" select="value"/>

    <xsl:value-of select="value"/>
    <xsl:value-of select="value"/>

    <xsl:copy-of select="value"/>
    <xsl:copy-of select="value"/>
    
    <xsl:if test="value">
      if code
    </xsl:if>

    <xsl:choose>
      <xsl:when test="value">
        when code
        <element/>
      </xsl:when>
      <xsl:otherwise>
        otherwise code
        <element/>
      </xsl:otherwise>
    </xsl:choose>

    <xsl:apply-templates select="/"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates>
    <xsl:apply-templates select="value"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates>
    <xsl:apply-templates select="value"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/>
      <xsl:with-param name="name">
        <!-- should be copied -->
        <element attr="{attr}"/>
        <!-- should be translated  -->
        <element><xsl:attribute name="attr">{<xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>attr}</xsl:attribute></element>
      </xsl:with-param>
    </xsl:apply-templates>

    <xsl:for-each select="value">
      foreach code
      <element/>
    </xsl:for-each>


    <xsl:for-each select="value">
      foreach code
      <element/>
    </xsl:for-each>

    <xsl:if test="value">
      <xsl:attribute name="attr">inline attr value</xsl:attribute>
      <xsl:element name="element">inline element value</xsl:element>
    </xsl:if>
  </xsl:template>

  <xsl:call-template name="gen:newline"/><xsl:element name="xsl:template"><xsl:attribute name="match"><xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>*</xsl:attribute><xsl:attribute name="mode">/samples</xsl:attribute><!-- result commands --><!-- all xsl commands shoud be converted to instruction for creating these commands--><xsl:element name="xsl:variable"><xsl:attribute name="name">/var1</xsl:attribute><xsl:attribute name="select"><xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>value</xsl:attribute></xsl:element><xsl:element name="xsl:if"><xsl:attribute name="test"><xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>value</xsl:attribute><xsl:text>
      if code
      </xsl:text><element/></xsl:element><xsl:element name="xsl:if"><xsl:attribute name="test"><xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>value</xsl:attribute><xsl:text>
      if code
      </xsl:text><element><xsl:element name="xsl:attribute"><xsl:attribute name="name">attr</xsl:attribute><xsl:text>value</xsl:text></xsl:element></element></xsl:element><xsl:element name="xsl:choose"><xsl:element name="xsl:when"><xsl:attribute name="test"><xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>value</xsl:attribute><xsl:text>
        when code
        </xsl:text><element/></xsl:element><xsl:element name="xsl:otherwise"><xsl:text>
        otherwise code
        </xsl:text><element/></xsl:element></xsl:element><xsl:element name="xsl:apply-templates"><xsl:attribute name="select"><xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>value</xsl:attribute></xsl:element><xsl:element name="xsl:for-each"><xsl:attribute name="select"><xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>value</xsl:attribute><xsl:text>
      foreach code
      </xsl:text><element/></xsl:element><xsl:element name="xsl:if"><xsl:attribute name="test"><xsl:apply-templates select="." mode="gen:object-uri"><xsl:with-param name="address" select="$address"/><xsl:with-param name="realaddress" select="$realaddress"/><xsl:with-param name="node" select="$node"/></xsl:apply-templates><xsl:text>/</xsl:text>value</xsl:attribute><xsl:element name="xsl:attribute"><xsl:attribute name="name">attr</xsl:attribute><xsl:text>result  attr value</xsl:text></xsl:element><xsl:element name="xsl:element"><xsl:attribute name="name">/element</xsl:attribute><xsl:text>result element value</xsl:text></xsl:element></xsl:element><element><p><xsl:text>will be generated</xsl:text></p><xsl:element name="xsl:attribute"><xsl:attribute name="name">attr</xsl:attribute><xsl:text>value</xsl:text></xsl:element></element><element><xsl:text>
      will be copied
      </xsl:text><xsl:attribute name="attr">value</xsl:attribute></element><xsl:text>
      will be generated
      </xsl:text><xsl:element name="xsl:element"/>[xitec:mode=object]
      will be copied
      <xsl:element/></xsl:element>

</xsl:stylesheet>
